name: Deploy Branch Preview

on:
  push:
    branches:
      - '**'
      - '!gh-pages'  # Exclude gh-pages branch
  pull_request:
    branches:
      - '**'
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

permissions:
  contents: write  # Changed from read to write to allow pushing to gh-pages
  pages: write
  id-token: write
  pull-requests: write  # Allow commenting on PRs

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    environment: 
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    # Skip deployment for gh-pages branch
    if: github.ref_name != 'gh-pages' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # For workflow_dispatch, checkout the specified branch
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.head_ref || github.ref }}
          
      - name: Determine branch name
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BRANCH_NAME="${{ github.event.inputs.branch }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          
          # Store original branch name for display
          echo "original_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Sanitize branch name for use in URLs and directory paths
          # Replace problematic characters with hyphens
          SAFE_NAME=$(echo "$BRANCH_NAME" | tr '/:?#[]@!$&'"'"'()*+,;=\\' '-' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          echo "name=$SAFE_NAME" >> $GITHUB_OUTPUT
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd web
          npm ci
          
      - name: Build application
        run: |
          cd web
          npm run build
          
      - name: Prepare deployment directory
        run: |
          # Create a directory structure for the branch
          mkdir -p deploy-temp/${{ steps.branch.outputs.name }}
          cp -r web/dist/* deploy-temp/${{ steps.branch.outputs.name }}/
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy-temp
          keep_files: true  # Keep other branch directories
          destination_dir: .
          enable_jekyll: false
          commit_message: 'Deploy ${{ steps.branch.outputs.original_name }} branch preview (as ${{ steps.branch.outputs.name }})'
          
      - name: Set deployment URL
        id: deployment-url
        run: |
          echo "url=https://litlfred.github.io/pqtorus/${{ steps.branch.outputs.name }}/" >> $GITHUB_OUTPUT
          
      - name: Setup GitHub Pages
        if: github.event_name != 'pull_request'
        uses: actions/configure-pages@v4
        
      - name: Comment on PR with deployment link
        if: github.event_name == 'pull_request' && steps.deployment.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const originalBranchName = '${{ steps.branch.outputs.original_name }}';
            const safeBranchName = '${{ steps.branch.outputs.name }}';
            const deployUrl = '${{ steps.deployment-url.outputs.url }}';
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}`;
            
            const comment = `<div align="center">

            ## 🚀 Deployment Preview Ready!
            
            Your changes have been successfully deployed to a preview environment.

            <table>
            <tr>
            <td align="center">
            
            ### 🌟 **Preview Environment**
            
            <a href="${deployUrl}" target="_blank" rel="noopener noreferrer">
            <img src="https://img.shields.io/badge/🔗_View_Preview-4CAF50?style=for-the-badge&logo=github&logoColor=white&labelColor=2E7D32" alt="View Preview" />
            </a>
            
            <br><br>
            
            ### 🔗 **Direct Link**
            **[🌐 Open Preview Site →](${deployUrl})**
            
            <br>
            
            <details>
            <summary><strong>📋 Deployment Details</strong></summary>
            <br>
            
            **🌐 Preview URL:** [${deployUrl}](${deployUrl})  
            **🌿 Branch:** \`${originalBranchName}\` ${originalBranchName !== safeBranchName ? `(deployed as \`${safeBranchName}\`)` : ''}  
            **⚡ Status:** ✅ Successfully Deployed  
            **🔄 Auto-updates:** This preview updates automatically with new commits
            
            </details>
            
            </td>
            </tr>
            </table>
            
            ---
            <sub>💡 <strong>Tip:</strong> All links above open in new tabs! Click anywhere on the preview button or direct link.</sub>

            </div>`;
            
            // Get existing comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Check if we already commented
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              (comment.body.includes('Deployment Preview Ready!') || comment.body.includes('Deployment Failed!'))
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
      - name: Comment on PR with deployment failure
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            const originalBranchName = '${{ steps.branch.outputs.original_name }}';
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}`;
            
            const comment = `<div align="center">

            ## ❌ Deployment Failed!
            
            The deployment preview could not be created due to an error.

            <table>
            <tr>
            <td align="center">
            
            ### 🔧 **Troubleshooting**
            
            <a href="${runUrl}" target="_blank" rel="noopener noreferrer">
            <img src="https://img.shields.io/badge/📋_View_Build_Logs-757575?style=for-the-badge&logo=github&logoColor=white&labelColor=424242" alt="View Build Logs" />
            </a>
            
            <br><br>
            
            ### 🔗 **Direct Link**
            **[📋 View Build Logs →](${runUrl})**
            
            <br>
            
            <details>
            <summary><strong>🔍 Failure Details</strong></summary>
            <br>
            
            **🌿 Branch:** \`${originalBranchName}\`  
            **❌ Status:** Failed to Deploy  
            **🛠️ Action:** Check the build logs above for error details  
            **🔄 Next Steps:** Fix the issues and push new commits to retry
            
            </details>
            
            </td>
            </tr>
            </table>
            
            ---
            <sub>💡 <strong>Tip:</strong> All links above open in new tabs! Click the build logs button or direct link above.</sub>

            </div>`;
            
            // Get existing comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Check if we already commented
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              (comment.body.includes('Deployment Preview Ready!') || comment.body.includes('Deployment Failed!'))
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }