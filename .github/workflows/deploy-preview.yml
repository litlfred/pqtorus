name: Deploy Branch Preview

on:
  push:
    branches:
      - '**'
      - '!gh-pages'  # Exclude gh-pages branch
  pull_request:
    branches:
      - '**'
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

permissions:
  contents: write  # Changed from read to write to allow pushing to gh-pages
  pages: write
  id-token: write
  pull-requests: write  # Allow commenting on PRs

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    environment: 
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    # Skip deployment for gh-pages branch
    if: github.ref_name != 'gh-pages' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # For workflow_dispatch, checkout the specified branch
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.head_ref || github.ref }}
          
      - name: Determine branch name
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "name=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "name=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          else
            echo "name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd web
          npm ci
          
      - name: Build application
        run: |
          cd web
          npm run build
          
      - name: Prepare deployment directory
        run: |
          # Create a directory structure for the branch
          mkdir -p deploy-temp/${{ steps.branch.outputs.name }}
          cp -r web/dist/* deploy-temp/${{ steps.branch.outputs.name }}/
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy-temp
          keep_files: true  # Keep other branch directories
          destination_dir: .
          enable_jekyll: false
          commit_message: 'Deploy ${{ steps.branch.outputs.name }} branch preview'
          
      - name: Set deployment URL
        id: deployment-url
        run: |
          echo "url=https://litlfred.github.io/pqtorus/${{ steps.branch.outputs.name }}/" >> $GITHUB_OUTPUT
          
      - name: Setup GitHub Pages
        if: github.event_name != 'pull_request'
        uses: actions/configure-pages@v4
        
      - name: Comment on PR with deployment link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.branch.outputs.name }}';
            const deployUrl = '${{ steps.deployment-url.outputs.url }}';
            
            const comment = `🚀 **Deployment Preview Ready!**
            
            Your changes have been deployed to a preview environment:
            
            **🔗 [View Preview](${deployUrl})** ← Click to open in new tab
            
            Preview URL: \`${deployUrl}\`
            Branch: \`${branchName}\`
            
            This preview is automatically updated with new commits to this PR.`;
            
            // Get existing comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Check if we already commented
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Deployment Preview Ready!')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }